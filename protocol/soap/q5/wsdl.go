// Code generated by gowsdl DO NOT EDIT.

package q5

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type FireWarn struct {
	XMLName xml.Name `xml:"http://www.chr-group.net/Dts FireWarn"`

	LocCode string `xml:"locCode,omitempty" json:"locCode,omitempty"`

	WarnContext string `xml:"warnContext,omitempty" json:"warnContext,omitempty"`
}

type FireWarnResponse struct {
	XMLName xml.Name `xml:"http://www.chr-group.net/Dts FireWarnResponse"`

	FireWarnResult bool `xml:"FireWarnResult,omitempty" json:"FireWarnResult,omitempty"`

	Msg string `xml:"msg,omitempty" json:"msg,omitempty"`
}

type DeviceWarn struct {
	XMLName xml.Name `xml:"http://www.chr-group.net/Dts DeviceWarn"`

	LocCode string `xml:"locCode,omitempty" json:"locCode,omitempty"`

	WarnContext string `xml:"warnContext,omitempty" json:"warnContext,omitempty"`
}

type DeviceWarnResponse struct {
	XMLName xml.Name `xml:"http://www.chr-group.net/Dts DeviceWarnResponse"`

	DeviceWarnResult bool `xml:"DeviceWarnResult,omitempty" json:"DeviceWarnResult,omitempty"`

	Msg string `xml:"msg,omitempty" json:"msg,omitempty"`
}

type TimeTicks struct {
	XMLName xml.Name `xml:"http://www.chr-group.net/Dts TimeTicks"`

	Token string `xml:"token,omitempty" json:"token,omitempty"`
}

type TimeTicksResponse struct {
	XMLName xml.Name `xml:"http://www.chr-group.net/Dts TimeTicksResponse"`

	TimeTicksResult int64 `xml:"TimeTicksResult,omitempty" json:"TimeTicksResult,omitempty"`
}

type Char int32

type Duration *Duration

type Guid string

type Base64Binary []byte

type Boolean bool

type Byte int8

type DateTime time.Time

type Decimal float64

type Double float64

type Float float32

type Int int32

type Long int64

type Short int16

type UnsignedByte byte

type UnsignedInt uint32

type UnsignedLong uint64

type UnsignedShort uint16

type IDtsWcfService interface {
	FireWarn(request *FireWarn) (*FireWarnResponse, error)

	FireWarnContext(ctx context.Context, request *FireWarn) (*FireWarnResponse, error)

	DeviceWarn(request *DeviceWarn) (*DeviceWarnResponse, error)

	DeviceWarnContext(ctx context.Context, request *DeviceWarn) (*DeviceWarnResponse, error)

	TimeTicks(request *TimeTicks) (*TimeTicksResponse, error)

	TimeTicksContext(ctx context.Context, request *TimeTicks) (*TimeTicksResponse, error)
}

type iDtsWcfService struct {
	client *soap.Client
}

func NewIDtsWcfService(client *soap.Client) IDtsWcfService {
	return &iDtsWcfService{
		client: client,
	}
}

func (service *iDtsWcfService) FireWarnContext(ctx context.Context, request *FireWarn) (*FireWarnResponse, error) {
	response := new(FireWarnResponse)
	err := service.client.CallContext(ctx, "http://www.chr-group.net/Dts/IDtsWcfService/FireWarn", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iDtsWcfService) FireWarn(request *FireWarn) (*FireWarnResponse, error) {
	return service.FireWarnContext(
		context.Background(),
		request,
	)
}

func (service *iDtsWcfService) DeviceWarnContext(ctx context.Context, request *DeviceWarn) (*DeviceWarnResponse, error) {
	response := new(DeviceWarnResponse)
	err := service.client.CallContext(ctx, "http://www.chr-group.net/Dts/IDtsWcfService/DeviceWarn", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iDtsWcfService) DeviceWarn(request *DeviceWarn) (*DeviceWarnResponse, error) {
	return service.DeviceWarnContext(
		context.Background(),
		request,
	)
}

func (service *iDtsWcfService) TimeTicksContext(ctx context.Context, request *TimeTicks) (*TimeTicksResponse, error) {
	response := new(TimeTicksResponse)
	err := service.client.CallContext(ctx, "http://www.chr-group.net/Dts/IDtsWcfService/TimeTicks", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *iDtsWcfService) TimeTicks(request *TimeTicks) (*TimeTicksResponse, error) {
	return service.TimeTicksContext(
		context.Background(),
		request,
	)
}
